ea.experiment(
  runs = (randomGenerator = (seed = [1:1:10]) * [ea.rg.defaultRG()]) *
    (problem = [
      ea.p.s.linearPoints(p = 200);
      ea.p.s.pointAiming(p = 200);
      ea.p.s.circularPointsAiming(p = 200);
      ea.p.s.ackley(p = 20);
      ea.p.s.rastrigin(p = 20);
      ea.p.s.sphere(p = 20)
    ]) *
    (solver = (nEval = [10000]) * [
      ea.s.doubleStringCabea(gridSize = 10; mooreRadius = 1);
      ea.s.doubleStringCabea(gridSize = 8; mooreRadius = 1);
      ea.s.doubleStringCabea(gridSize = 6; mooreRadius = 1);
      ea.s.doubleStringCabea(gridSize = 4; mooreRadius = 1);
      ea.s.doubleStringCabea(gridSize = 10; mooreRadius = 2);
      ea.s.doubleStringCabea(gridSize = 10; mooreRadius = 3);
      ea.s.doubleStringCabea(gridSize = 10; mooreRadius = 4)
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%3d");
        ea.nf.bestFitness(s = "%6.2f");
        ea.nf.hist(collection = ea.nf.each(map = ea.nf.fitness(); collection = ea.nf.all()))
      ];
      runKeys = [
        ea.misc.sEntry(key = "problem.name"; value = "{problem:%#s}");
        ea.misc.sEntry(key = "problem.p"; value = "{problem.p}");
        ea.misc.sEntry(key = "solver.gridSize"; value = "{solver.gridSize}");
        ea.misc.sEntry(key = "solver.mooreRadius"; value = "{solver.mooreRadius}")
      ]
    )
  ]
)